[server]
# host: 0.0.0.0
port: 7125
ssl_port: 7130
# route_prefix: yarus
max_upload_size: 2048
klippy_uds_address: ~/printer_data/comms/klippy.sock

[file_manager]
queue_gcode_uploads:        True # file manager will add uploads to the job_queue when the `start_print` flag has been set
check_klipper_config_path:  True # file manager will check the klipper config path for changes
enable_object_processing:   True # file manager will process uploaded objects
# file_system_observer: inotify
enable_observer_warnings:   True
enable_config_write_access: True

[machine]
provider: systemd_dbus
shutdown_action: poweroff
sudo_password: {secrets.sudo.password}
# validate_service: True
# validate_config:  True
# force_validation: True

[database]

[data_store]
temperature_store_size: 2400
gcode_store_size:       2000

[job_queue]
load_on_startup: True
automatic_transition: False
# job_transition_delay: 120
# job_transition_gcode:

[announcements]
subscriptions:
  klipper
  moonraker
  mainsail

[webcam Nebula] # Nebula camera configuration
enabled: True
location: printer
icon: mdiWebcam
service: mjpegstreamer-adaptive
aspect_ratio:  16:9
target_fps:      25
target_fps_idle: 10
stream_url:   http://yarus.xyz:81/webcam/stream
snapshot_url: http://yarus.xyz:81/webcam/snapshot
# rotation: 0
# flip_vertical: False
# flip_horizontal: True 

[authorization]
enable_api_key: True
force_logins: False
default_source: moonraker
cors_domains:
  *://my.mainsail.xyz:*
  *://yarus.xyz:*
  *://*.local:*
  *://*.lan:*
trusted_clients:
  127.0.0.0/8
  192.168.0.0/16
  FE80::/10
  ::1/128

#   Optional Components

# [ldap]

[octoprint_compat]
enable_ufp: True
webcam_enabled: True
stream_url: yarus.xyz:81/webcam/stream
# flip_h: True
# flip_v: True
# rotate_90: False

[history]

# [paneldue]

[power printer]
type: gpio
pin: gpio73
# timer: 20.
initial_state: on
off_when_shutdown: true
off_when_shutdown_delay: 10.
on_when_job_queued: true
locked_while_printing: True
restart_klipper_when_powered: true
restart_delay: 5.
bound_services:
    klipper
    klipper-mcu

# [mqtt]

[zeroconf]
mdns_hostname: yarus.xyz
enable_ssdp: True

[secrets]

# ~/printer_data/moonraker.secrets
# [mqtt]
# address: yarus.xyz
# username: username
# password: password
# [sudo]
# password: password

[spoolman]
server: 0.0.0.0:7912
# sync_rate: 5

[mqtt]
address: {secrets.mqtt.username}
#   Address of the Broker.  This may be a hostname or IP Address.  This
#   parameter must be provided.
port: 1883
#   Port the Broker is listening on.  Default is 1883.
# client_id:
#   A string client identifer sent by the client to the broker after
#   connecting.  The default is a randomly assigned client id.
# enable_tls: False
#   Enables SSL/TLS connections when set to true.  Note that if a user intends
#   to connect to a local MQTT service using a self signed certificate then
#   it will be necessary to install the root CA certificate on the machine
#   hosting Moonraker.  Default is False.
username: {secrets.mqtt.username}
#   An optional username used to log in to the Broker.  This option accepts
#   Jinja2 Templates, see the [secrets] section for details. The default is
#   no username (an anonymous login will be attempted).
password: {secrets.mqtt.password}
#   An optional password used to log in to the Broker.  This option accepts
#   Jinja2 Templates, see the [secrets] section for details.  The default is
#   no password.
# password_file:
#   *** DEPRECATED - Use the "password" option ***
#   An optional path to a text file containing a password used to log in
#   to the broker.  It is strongly recommended that this file be located
#   in a folder not served by Moonraker.  It is also recommended that the
#   password be unique and not used for other logins, as it is stored in
#   plain text.  To create a password file, one may ssh in to the device
#   and enter the following commands:
#      cd ~
#      echo mypassword > .mqttpass
#   Then set this option to:
#     ~/.mqttpass
#   If this option is omitted no password will be used to login.
# mqtt_protocol: v3.1.1
#   The protocol to use when connecting to the Broker.  May be v3.1,
#   v3.1.1, and v5.  The default is v3.1.1
enable_moonraker_api: True
#   If set to true the MQTT client will subscribe to API topic, ie:
#     {instance_name}/moonraker/api/request
#   This can be set to False if the user does not wish to allow API
#   requests over MQTT.  The default is True.
# instance_name:
#   An identifier used to create unique API topics for each instance of
#   Moonraker on network.  This name cannot contain wildcards (+ or #).
#   For example, if the instance name is set to my_printer, Moonraker
#   will subscribe to the following topic for API requests:
#     my_printer/moonraker/api/request
#   Responses will be published to the following topic:
#     my_printer/moonraker/api/response
#   The default is the machine's hostname.
# status_objects:
#   A newline separated list of Klipper objects whose state will be
#   published.  There are two different ways to publish the states - you
#   can use either or both depending on your need.  See the
#   "publish_split_status" options for details.
#
#   For example, this option could be set as follows:
#
#     status_objects:
#       webhooks
#       toolhead=position,print_time,homed_axes
#       extruder=temperature
#
#   In the example above, all fields of the "webhooks" object will be tracked
#   and changes will be published.  Only the "position", "print_time", and
#   "homed_axes" fields of the "toolhead" will be tracked.  Likewise, only the
#   "temperature" field of the extruder will be tracked. See the
#   "Printer Objects" section of the documentation for an overview of the most
#   common objects available.
#
#   Note that Klipper will only push an update to an object/field if the field
#   has changed.  An object with no fields that have changed will not be part
#   of the payload.  Object state is checked and published roughly every 250 ms.
#
#   If not configured then no objects will be tracked and published to
#   the klipper/status topic.
# status_interval:
#   The interval (in seconds) between published status updates.  This value
#   can be used to limit the rate of updates published.  By default Moonraker
#   will publish Klipper status updates as it receives them.
# publish_split_status: False
#   Configures how to publish status updates to MQTT.
#
#   When set to False (default), all Klipper object state updates will be
#   published to a single mqtt state with the following topic:
#     {instance_name}/klipper/status
#
#   When set to True, all Klipper object state updates will be published to
#   separate mqtt topics derived from the object and item in the following
#   format:
#     {instance_name}/klipper/state/{objectname}/{statename}
#
#   The actual value of the state is published as "value" to the topic above.
#   For example, if the heater_bed temperature was 24.0, this is the payload:
#     {"eventtime": {timestamp}, "value": 24.0}
#   It would be published to this topic:
#     {instance_name}/klipper/state/heater_bed/temperature
default_qos: 0
#   The default QOS level used when publishing or subscribing to topics.
#   Must be an integer value from 0 to 2.  The default is 0.
api_qos:
#   The QOS level to use for the API topics. If not provided, the
#   value specified by "default_qos" will be used.

# ----- update manager ---

[update_manager]
channel: dev
refresh_interval: 168
enable_packagekit: True
enable_auto_refresh: True
enable_system_updates: True

[update_manager klipper_tmc_autotune]
type: git_repo
channel: dev
path: ~/klipper_tmc_autotune
origin: git@github.com:andrewmcgr/klipper_tmc_autotune.git
managed_services: klipper
primary_branch: main
install_script: install.sh

[update_manager kiauh]
type: git_repo
origin: https://github.com/dw-0/kiauh.git
path: ~/kiauh
is_system_service: False

[update_manager klipper-backup]
type: git_repo
path: ~/klipper-backup
origin: https://github.com/Staubgeborener/klipper-backup.git
managed_services: moonraker
primary_branch: main

[update_manager mainsail]
path: /home/alpharius/mainsail
repo: mainsail-crew/mainsail
channel: stable
type: web

[update_manager mainsail-config]
managed_services: klipper
origin: https://github.com/mainsail-crew/mainsail-config.git
path: /home/alpharius/mainsail-config
primary_branch: master
type: git_repo

[update_manager crowsnest]
type: git_repo
path: ~/crowsnest
origin: https://github.com/mainsail-crew/crowsnest.git
managed_services: crowsnest
install_script: tools/pkglist.sh

[update_manager Spoolman]
type: zip
channel: stable
repo: Donkie/Spoolman
path: /home/alpharius/Spoolman
virtualenv: .venv
requirements: requirements.txt
persistent_files:
  .venv
  .env
managed_services: Spoolman

[update_manager moonraker-telegram-bot]
install_script: scripts/install.sh
requirements: scripts/requirements.txt
env: /home/alpharius/moonraker-telegram-bot-env/bin/python
origin: https://github.com/nlef/moonraker-telegram-bot.git
path: /home/alpharius/moonraker-telegram-bot
type: git_repo
